{"ast":null,"code":"var _jsxFileName = \"/Users/home/dev/cshyper/src/components/Form.js\";\nimport React from \"react\";\nimport dragula from \"react-dragula\";\nimport firebase from \"./firebase\";\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFirstAttempt: false,\n      unrankedTeams: [\"Astralis\", \"Liquid\", \"Evil Geniuses\", \"fnatic\", \"Vitality\", \"Avangar\", \"Mousesports\", \"100 Thieves\", \"Natus Vincere\", \"ENCE\", \"NIP\", \"Complexity\", \"Furia\", \"G2\", \"forZe\", \"Cr4zy\", \"MIBR\", \"North\", \"Heroic\", \"FaZe\", \"Sharks\", \"Tricked\", \"BIG\", \"Grayhound\"],\n      rankedTeams: {},\n      numOfTeamsRanked: 0\n    };\n    this.countTeams = this.countTeams.bind(this);\n    this.completeRankings = this.completeRankings.bind(this);\n  }\n\n  pushFirestore(submission) {\n    let db = firebase.firestore();\n    db.collection(\"rankings\").add(submission);\n  }\n\n  completeRankings() {\n    if (this.state.isFirstAttempt) {\n      this.setState({\n        isFirstAttempt: false\n      });\n      alert(\"Are you sure? This cannot be undone. \\n Click submit again to complete your rankings.\");\n    } else {\n      let submission = {\n        Ranker: \"User\",\n        Country: \"Country\"\n      };\n      let rank = 0;\n      document.querySelectorAll(\"#dropTarget div\").forEach(element => submission[++rank] = element.innerText);\n      console.log(submission);\n    }\n  }\n\n  countTeams() {\n    let rankedTeams = {};\n    let rank = 0;\n    document.querySelectorAll(\"#dropTarget div\").forEach(element => rankedTeams[++rank] = element.innerText);\n    this.setState({\n      rankedTeams: rankedTeams,\n      numOfTeamsRanked: Object.keys(rankedTeams).length\n    });\n  }\n\n  render() {\n    const listTeams = this.state.unrankedTeams.map(team => React.createElement(\"div\", {\n      id: team,\n      className: \"formElem\",\n      key: team,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, team));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"titleBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Last Week's Rankings\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Please drag teams from the left box into the right box. When you've finished, click the submit button at the bottom.\")), React.createElement(\"div\", {\n      className: \"titleBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Your Rankings\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"You have ranked \", this.state.numOfTeamsRanked, \" out of 20 teams. Please complete all 20 of your rankings before you submit.\")), React.createElement(\"div\", {\n      className: \"dragBox\",\n      id: \"dragElements\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, listTeams), React.createElement(\"div\", {\n      className: \"dragBox\",\n      id: \"dropTarget\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      id: \"FormSubmit\",\n      onClick: this.completeRankings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"submit\"));\n  }\n\n  componentDidMount() {\n    dragula([document.getElementById(\"dragElements\"), document.getElementById(\"dropTarget\")], {\n      revertOnSpill: true,\n      mirrorContainer: document.body\n    }).on(\"drop\", this.countTeams);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["/Users/home/dev/cshyper/src/components/Form.js"],"names":["React","dragula","firebase","Form","Component","constructor","props","state","isFirstAttempt","unrankedTeams","rankedTeams","numOfTeamsRanked","countTeams","bind","completeRankings","pushFirestore","submission","db","firestore","collection","add","setState","alert","Ranker","Country","rank","document","querySelectorAll","forEach","element","innerText","console","log","Object","keys","length","render","listTeams","map","team","componentDidMount","getElementById","revertOnSpill","mirrorContainer","body","on"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport dragula from \"react-dragula\";\nimport firebase from \"./firebase\";\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFirstAttempt: false,\n      unrankedTeams: [\n        \"Astralis\",\n        \"Liquid\",\n        \"Evil Geniuses\",\n        \"fnatic\",\n        \"Vitality\",\n        \"Avangar\",\n        \"Mousesports\",\n        \"100 Thieves\",\n        \"Natus Vincere\",\n        \"ENCE\",\n        \"NIP\",\n        \"Complexity\",\n        \"Furia\",\n        \"G2\",\n        \"forZe\",\n        \"Cr4zy\",\n        \"MIBR\",\n        \"North\",\n        \"Heroic\",\n        \"FaZe\",\n        \"Sharks\",\n        \"Tricked\",\n        \"BIG\",\n        \"Grayhound\"\n      ],\n      rankedTeams: {},\n      numOfTeamsRanked: 0\n    };\n    this.countTeams = this.countTeams.bind(this);\n    this.completeRankings = this.completeRankings.bind(this);\n  }\n  pushFirestore(submission) {\n    let db = firebase.firestore();\n    db.collection(\"rankings\").add(submission);\n  }\n  completeRankings() {\n    if (this.state.isFirstAttempt) {\n      this.setState({ isFirstAttempt: false });\n      alert(\n        \"Are you sure? This cannot be undone. \\n Click submit again to complete your rankings.\"\n      );\n    } else {\n      let submission = {\n        Ranker: \"User\",\n        Country: \"Country\"\n      };\n      let rank = 0;\n      document\n        .querySelectorAll(\"#dropTarget div\")\n        .forEach(element => (submission[++rank] = element.innerText));\n      console.log(submission);\n    }\n  }\n  countTeams() {\n    let rankedTeams = {};\n    let rank = 0;\n    document\n      .querySelectorAll(\"#dropTarget div\")\n      .forEach(element => (rankedTeams[++rank] = element.innerText));\n    this.setState({\n      rankedTeams: rankedTeams,\n      numOfTeamsRanked: Object.keys(rankedTeams).length\n    });\n  }\n  render() {\n    const listTeams = this.state.unrankedTeams.map(team => (\n      <div id={team} className=\"formElem\" key={team}>\n        {team}\n      </div>\n    ));\n    return (\n      <div>\n        <div className=\"Form\">\n          <div className=\"titleBox\">\n            <h2>Last Week's Rankings</h2>\n            <p>\n              Please drag teams from the left box into the right box. When\n              you've finished, click the submit button at the bottom.\n            </p>\n          </div>\n          <div className=\"titleBox\">\n            <h2>Your Rankings</h2>\n            <p>\n              You have ranked {this.state.numOfTeamsRanked} out of 20 teams.\n              Please complete all 20 of your rankings before you submit.\n            </p>\n          </div>\n          <div className=\"dragBox\" id=\"dragElements\">\n            {listTeams}\n          </div>\n          <div className=\"dragBox\" id=\"dropTarget\"></div>\n        </div>\n        <button id=\"FormSubmit\" onClick={this.completeRankings}>\n          submit\n        </button>\n      </div>\n    );\n  }\n  componentDidMount() {\n    dragula(\n      [\n        document.getElementById(\"dragElements\"),\n        document.getElementById(\"dropTarget\")\n      ],\n      {\n        revertOnSpill: true,\n        mirrorContainer: document.body\n      }\n    ).on(\"drop\", this.countTeams);\n  }\n}\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}